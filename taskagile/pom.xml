<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>app</groupId>
	<artifactId>taskagile</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>taskagile</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>11</java.version>
		<commons-io.version>2.6</commons-io.version>
		<im4java.version>1.4.0</im4java.version>
		<aws-s3.version>1.11.409</aws-s3.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- 테스트 코드 작성 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-websocket</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

		<!-- Java JWT -->
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>0.10.5</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <version>0.10.5</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>0.10.5</version>
      <scope>runtime</scope>
    </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>

		<!-- 구성 속성을 정의하는데 필요한 라이브러리 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- 유효성 검사 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- 이미지 처리 관련 라이브러리 -->
		<dependency>
      <groupId>org.im4java</groupId>
      <artifactId>im4java</artifactId>
      <version>${im4java.version}</version>
    </dependency>

		<!-- 파일을 아마존 S3에 저장하기 의존성 추가 -->
		<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-aws</artifactId>
				<version>2.0.1.RELEASE</version>
		</dependency>
		<dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-s3</artifactId>
      <version>${aws-s3.version}</version>
    </dependency>

		<!-- AMQP로 활동을 비동기로 추적 -->
		<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>pre integration test</id>
						<goals>
							<!-- start 골이 pre integration test 페이즈를 위한 것임을 알려준다. -->
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>post integration test</id>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 이 플러그인을 통해 npm 명령어들을 실행할 수 있다 / mvn install로 실행 -->
			<!-- 메이븐은 빌드 라이프 사이클에서 효과적으로 활용할 수 있는 다양한 내장 페이즈를 지원하며, 아래에서는 특정 페이즈마다 
				명령어들을 실행한다. -->
			<!-- 페이즈 진행 순서 : (초기화) -> (process-resources : 리소스를 목적지 디렉터리로 옮긴다) -> 
				(컴파일) -> (테스트) -->
			<!-- (prepare-package : 여기서 프론트엔드를 빌드하고, 백엔드 /resources와 /target 폴더로 옮긴다) 
				-> (package : /target 디렉토리를 패키지로 만든다) -->
			<!-- (pre-integration-test) -> (start) -> (integration test) -> (post-integration-test) 
				-> (stop) -> (install) -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<!-- prepare-package 페이즈에서 install 명령어를 실행하도록 알려주는 부분 -->
					<execution>
						<id>frontend install</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<!-- 페이즈 -->
						<phase>prepare-package</phase>
						<configuration>
							<!-- 명령어 기재하는 부분 -->
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- prepare-package 페이즈에서 npm run test:unit 명령어를 실행하도록 알려주는 부분 -->
					<execution>
						<id>frontend unit test</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<!-- 페이즈 -->
						<phase>prepare-package</phase>
						<configuration>
							<!-- 명령어 기재하는 부분 -->
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>test:unit</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- prepare-package 페이즈에서 npm run build 명령어를 실행하도록 알려주는 부분 -->
					<execution>
						<id>frontend build package</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<!-- 페이즈 -->
						<phase>prepare-package</phase>
						<configuration>
							<!-- 명령어 기재하는 부분 -->
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>build</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- integration-test 페이즈에서 npm run test:e2e 명령어를 실행하도록 알려주는 부분 -->
					<execution>
						<id>frontend e2e test</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<!-- 페이즈 -->
						<phase>integration-test</phase>
						<configuration>
							<!-- 명령어 기재하는 부분 -->
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>test:integration</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
				<!-- workingDirectory는 명령어가 frontend 폴더에서 실행됨을 알려준다. -->
				<configuration>
					<workingDirectory>${basedir}/frontend</workingDirectory>
				</configuration>
			</plugin>
			<!-- 이 플러그인을 추가하여, 프론트엔드의 빌드 결과를 src/main/resources 디렉토리에 복사 -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<!-- prepare-package 페이즈에서 index.html을 /src/main/resources/templates로 
						옮긴다. -->
					<execution>
						<id>copy frontend template</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<!-- 페이즈 -->
						<phase>prepare-package</phase>
						<configuration>
							<!-- 목적지 경로 -->
							<outputDirectory>${basedir}/src/main/resources/templates</outputDirectory>
							<resources>
								<resource>
									<!-- 출발지 경로 -->
									<directory>frontend/dist</directory>
									<includes>
										<include>index.html</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- prepare-package 페이즈에서 index.html를 제외한 파일들을 /src/main/resources/static으로 
						옮긴다. -->
					<execution>
						<id>copy frontend assets</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<!-- 페이즈 -->
						<phase>prepare-package</phase>
						<configuration>
							<!-- 목적지 경로 -->
							<outputDirectory>${basedir}/src/main/resources/static</outputDirectory>
							<resources>
								<resource>
									<!-- 출발지 경로 -->
									<directory>frontend/dist</directory>
									<excludes>
										<exclude>index.html</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- package 페이즈에서 target/ 디렉토리를 패키지로 만들기 때문에, prepare-package 페이즈에서 
						target 경로로도 복사한다 -->
					<!-- 초기화와 컴파일 페이즈 사이의 process-resources 페이즈에서 메이븐이 리소스를 복사하고 처리해서 목적지 
						디렉토리로 옮기기 때문에 -->
					<!-- 만약 아래와 같이 target 경로에 복사해주지 않으면, 빌드를 두번 실행하여, src/main/resources의 
						리소스가 목적지로 옮겨지도록 해야한다. -->
					<execution>
						<id>copy front-end template to target</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>prepare-package</phase>
						<configuration>
							<outputDirectory>${basedir}/target/classes/templates</outputDirectory>
							<resources>
								<resource>
									<directory>frontend/dist</directory>
									<includes>
										<include>index.html</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- package 페이즈에서 target/ 디렉토리를 패키지로 만들기 때문에, prepare-package 페이즈에서 
						target 경로로도 복사한다 -->
					<!-- 초기화와 컴파일 페이즈 사이의 process-resources 페이즈에서 메이븐이 리소스를 복사하고 처리해서 목적지 
						디렉토리로 옮기기 때문에 -->
					<!-- 만약 아래와 같이 target 경로에 복사해주지 않으면, 빌드를 두번 실행하여, src/main/resources의 
						리소스가 목적지로 옮겨지도록 해야한다. -->
					<execution>
						<id>copy front-end assets to target</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>prepare-package</phase>
						<configuration>
							<outputDirectory>${basedir}/target/classes/static</outputDirectory>
							<resources>
								<resource>
									<directory>frontend/dist</directory>
									<excludes>
										<exclude>index.html</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- src/main/resources 폴더로 복사하는 에셋을 빌드전에 깨끗이 제거한다 / 무엇을 지울지 아래에 명시하고, 
				mvn clean install 명령어로 플러그인 실행 -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}/src/main/resources/static</directory>
						</fileset>
						<fileset>
							<directory>${basedir}/src/main/resources/templates</directory>
							<includes>
								<include>index.html</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
